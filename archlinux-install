#!/usr/bin/env bash
set -Eeo pipefail
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

RED="\033[0;31m"
GREEN="\033[0;32m"
CYAN="\033[0;36m"
ORANGE="\033[0;33m"
NOCOLOR="\033[0m"

function print_error {
    echo ""
    echo -e "${RED}$1${NOCOLOR}"
    echo ""
}

function print-step {
    if [[ $1 ]]; then
        clear
    fi
    echo ""
    echo -e "${GREEN}$2${NOCOLOR}"
}

function print-sub-step {
    echo -e "${CYAN}$1${NOCOLOR}"
}

function prompt {
    read -e -p "$(echo -e ${ORANGE}"$1"${NOCOLOR})" $2
}

function install {
    print-step false "Welcome to the archlinux-install script !"
    if [ ! -d "/sys/firmware/efi" ]; then
        BIOS="Y"
        print_error "  /!\ BIOS detected ! The script will act accordingly. Don't forget to select a DOS label type before partitioning."
    else
        BIOS="N"
    fi

    USER_ANSWER="N"
    while test "$USER_ANSWER" != "y" && test "$USER_ANSWER" != "Y"; do
        print-step true "Environment configuration : "
        prompt "Choose your installation's language (1: FR, other: EN) : " LANGUAGE
        if [ -z $LANGUAGE ]; then
            LANGUAGE="en"
        fi
        if test "$LANGUAGE" = "1"; then
            LANGUAGE="fr"
        else
            LANGUAGE="en"
        fi
        prompt "Type your installation's keymap (default: fr-latin9) : " KEYMAP
        if [ -z $KEYMAP ]; then
            KEYMAP="fr-latin9"
        fi
        print-step true "Summary of choices :"
        print-sub-step "  * Your installation's language : $LANGUAGE"
        print-sub-step "  * Your installation's keymap : $KEYMAP"
        prompt "Is the information correct ? (y/N) : " USER_ANSWER
    done

    USER_ANSWER="N"
    while test "$USER_ANSWER" != "y" && test "$USER_ANSWER" != "Y"; do
        print-step true "System configuration : "
        fdisk -l
        prompt "On which disk should Archlinux be installed ? : " TARGET_DISK
        prompt "What will be your hostname : " HOSTNAME
        prompt "Install Intel microcode ? (y/N) : " INTEL_UCODE
        prompt "Install AMD microcode ? (y/N) : " AMD_UCODE
        prompt "Install LTS Linux kernel ? (y/N) : " LTS_KERNEL
        prompt "Install proprietary Nvidia driver ? (y/N) : " NVIDIA_DRIVER
        prompt "Install terminus console font ? (y/N) : " TERMINUS_FONT
        prompt "Your timezone (/usr/share/zoneinfo/Europe/Paris) : " TIMEZONE
        prompt "Would you like to add a user? (username, leave blank if none) : " USER_NAME
        if [ -z $INTEL_UCODE ]; then
            INTEL_UCODE="N"
        fi
        if [ -z $AMD_UCODE ]; then
            AMD_UCODE="N"
        fi
        if [ -z $LTS_KERNEL ]; then
            LTS_KERNEL="N"
        fi
        if [ -z $NVIDIA_DRIVER ]; then
            NVIDIA_DRIVER="N"
        fi
        if [ -z $TERMINUS_FONT ]; then
            TERMINUS_FONT="N"
        fi
        if [ -z $TIMEZONE ]; then
            TIMEZONE="/usr/share/zoneinfo/Europe/Paris"
        fi
        print-step true "Summary of choices :"
        print-sub-step "  * Your target drive : $TARGET_DISK"
        print-sub-step "  * Your hostname : $HOSTNAME"
        print-sub-step "  * Installing Intel microcode : $INTEL_UCODE"
        print-sub-step "  * Installing AMD microcode : $AMD_UCODE"
        print-sub-step "  * Install LTS Linux kernel : $LTS_KERNEL"
        print-sub-step "  * Install proprietary Nvidia driver : $NVIDIA_DRIVER"
        print-sub-step "  * Install terminus console font : $TERMINUS_FONT"
        print-sub-step "  * Your timezone : $TIMEZONE"
        if [ ! -z $USER_NAME ]; then
            print-sub-step "  * Additional user name : $USER_NAME"
        fi
        prompt "Is the informations correct ? (y/N) : " USER_ANSWER
    done

    # Partitioning
    declare -a PARTITIONS=($(fdisk -l | grep ^${TARGET_DISK}* | awk '{print $1}'))
    declare -A PART_TYPE
    declare -A PART_MOUNT_POINT
    declare -A PART_FORMAT
    USER_ANSWER="N"
    while test "$USER_ANSWER" != "y" && test "$USER_ANSWER" != "Y"; do
        print-step true "Partitioning the target drive..."
        cfdisk $TARGET_DISK
        EFI_OK="N"
        ROOT_OK="N"
        print-step true "Detected target drive partitions :"
        INDEX=0
        for partition in "${PARTITIONS[@]}"; do
            print-sub-step "  * Partition : $(fdisk -l | grep $partition)"
            if test "$BIOS" = "Y"; then
                prompt "What is the role of this partition ? (1: Root, 2: Home, other: Other) : " TYPE
            else
                prompt "What is the role of this partition ? (0: EFI, 1: Root, 2: Home, other: Other) : " TYPE
            fi
            if test "$BIOS" = "N" && test "$TYPE" = "0"; then
                PART_TYPE["$partition"]="EFI"
                PART_MOUNT_POINT["$partition"]="/boot/efi"
                prompt "Format the EFI partition ? (y/N) : " PART_FORMAT["$partition"]
                if [ -z ${PART_FORMAT[${partition}]} ]; then
                    PART_FORMAT["$partition"]="N"
                fi
                EFI_OK="y"
            elif test "$TYPE" = "1"; then
                PART_TYPE["$partition"]="ROOT"
                PART_MOUNT_POINT["$partition"]="/"
                ROOT_OK="y"
            elif test "$TYPE" = "2"; then
                PART_TYPE["$partition"]="HOME"
                PART_MOUNT_POINT["$partition"]="/home"
                prompt "Format the Home partition ? (y/N) : " PART_FORMAT["$partition"]
                if [ -z ${PART_FORMAT[${partition}]} ]; then
                    PART_FORMAT["$partition"]="N"
                fi
            else
                PART_TYPE["$partition"]="OTHER"
                prompt "What is the mounting point of this partition ? : " MOUNT_POINT
                PART_MOUNT_POINT["$partition"]="$MOUNT_POINT"
                prompt "Format the $partition partition ? (Y/n) : " PART_FORMAT["$partition"]
                if [ -z ${PART_FORMAT[${partition}]} ]; then
                    PART_FORMAT["$partition"]="Y"
                fi
            fi
            let INDEX=${INDEX}+1
        done
        prompt "Swapfile size ? (Example: 8G, leave empty if none) : " SWAPFILE_SIZE
        if test "$BIOS" = "N" && test "$EFI_OK" = "N"; then
            print_error "  /!\ The EFI partition is required for system installation."
            continue
        fi
        if test "$ROOT_OK" = "N"; then
            print_error "  /!\ The Root partition is required for system installation."
            continue
        fi
        print-step true "Summary of choices :"
        for partition in "${PARTITIONS[@]}"; do
            if test "${PART_TYPE[${partition}]}" = "EFI"; then
                print-sub-step "  * EFI partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]})"
                print-sub-step "  * Format the EFI partition : ${PART_FORMAT[${partition}]}"
            elif test "${PART_TYPE[${partition}]}" = "ROOT"; then
                print-sub-step "  * ROOT partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]})"
            elif test "${PART_TYPE[${partition}]}" = "HOME"; then
                print-sub-step "  * Home partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]})"
                print-sub-step "  * Format the Home partition : ${PART_FORMAT[${partition}]}"
            elif test "${PART_TYPE[${partition}]}" = "OTHER"; then
                print-sub-step "  * Other partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]})"
                print-sub-step "  * Format the ${partition} partition : ${PART_FORMAT[${partition}]}"
            fi
        done
        if [ ! -z $SWAPFILE_SIZE ]; then
            print-sub-step "  * Swapfile size : $SWAPFILE_SIZE"
        fi
        prompt "Is the informations correct ? (y/N) : " USER_ANSWER
    done

    print-step true "Formatting and mounting partitions..."
    for partition in "${PARTITIONS[@]}"; do
        if test "${PART_TYPE[${partition}]}" = "ROOT"; then
            mkfs.ext4 "${partition}"
            mkdir -p "/mnt${PART_MOUNT_POINT[${partition}]}"
            mount "${partition}" "/mnt${PART_MOUNT_POINT[${partition}]}"
        fi
    done
    if test "$BIOS" = "N"; then
        for partition in "${PARTITIONS[@]}"; do
            if test "${PART_TYPE[${partition}]}" = "EFI"; then
                if test "${PART_FORMAT[${partition}]}" = "y" || test "${PART_FORMAT[${partition}]}" = "Y"; then
                    mkfs.vfat "${partition}"
                fi
                mkdir -p "/mnt${PART_MOUNT_POINT[${partition}]}"
                mount "${partition}" "/mnt${PART_MOUNT_POINT[${partition}]}"
            fi
        done
    fi
    for partition in "${PARTITIONS[@]}"; do
        if test "${PART_TYPE[${partition}]}" = "HOME"; then
            if test "${PART_FORMAT[${partition}]}" = "y" || test "${PART_FORMAT[${partition}]}" = "Y"; then
                mkfs.ext4 "${partition}"
            fi
            mkdir -p "/mnt${PART_MOUNT_POINT[${partition}]}"
            mount "${partition}" "/mnt${PART_MOUNT_POINT[${partition}]}"
        fi
    done
    for partition in "${PARTITIONS[@]}"; do
        if test "${PART_TYPE[${partition}]}" = "OTHER"; then
            if test "${PART_FORMAT[${partition}]}" = "y" || test "${PART_FORMAT[${partition}]}" = "Y"; then
                mkfs.ext4 "${partition}"
            fi
            mkdir -p "/mnt${PART_MOUNT_POINT[${partition}]}"
            mount "${partition}" "/mnt${PART_MOUNT_POINT[${partition}]}"
        fi
    done

    # Creation and activation of the swapfile
    if [ ! -z $SWAPFILE_SIZE ]; then
        print-step true "Creation and activation of the swapfile..."
        fallocate -l $SWAPFILE_SIZE /mnt/swapfile
        chmod 600 /mnt/swapfile
        mkswap /mnt/swapfile
        swapon /mnt/swapfile
    fi

    # Updating mirrors
    print-step true "Updating mirrors..."
    reflector @/etc/xdg/reflector/reflector.conf

    # Installation of the base
    print-step true "Installation of the base..."
    pkgs=("base" "base-devel" "linux-firmware" "man-db" "man-pages" "texinfo" "nano" "vim" "git" "curl" "zsh" "zsh-completions" "grml-zsh-config" "grub" "os-prober" "efibootmgr" "networkmanager" "xdg-user-dirs")
    if test "$INTEL_UCODE" = "y" || test "$INTEL_UCODE" = "Y"; then
        pkgs+=("intel-ucode")
    fi
    if test "$AMD_UCODE" = "y" || test "$AMD_UCODE" = "Y"; then
        pkgs+=("amd-ucode")
    fi
    if test "$LTS_KERNEL" = "y" || test "$LTS_KERNEL" = "Y"; then
        pkgs+=("linux-lts")
    else
        pkgs+=("linux")
    fi
    if test "$NVIDIA_DRIVER" = "y" || test "$NVIDIA_DRIVER" = "Y"; then
        if test "$LTS_KERNEL" = "y" || test "$LTS_KERNEL" = "Y"; then
            pkgs+=("nvidia-lts")
        else
            pkgs+=("nvidia")
        fi
    fi
    if test "$TERMINUS_FONT" = "y" || test "$TERMINUS_FONT" = "Y"; then
        pkgs+=("terminus-font")
    fi
    pacstrap /mnt ${pkgs[@]}

    # System configuration
    print-step true "System configuration..."
    genfstab -U /mnt >>/mnt/etc/fstab
    sed -i "s|#en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g" /mnt/etc/locale.gen
    sed -i "s|#en_US ISO-8859-1|en_US ISO-8859-1|g" /mnt/etc/locale.gen
    if test "$LANGUAGE" = "fr"; then
        sed -i "s|#fr_FR.UTF-8 UTF-8|fr_FR.UTF-8 UTF-8|g" /mnt/etc/locale.gen
        sed -i "s|#fr_FR ISO-8859-1|fr_FR ISO-8859-1|g" /mnt/etc/locale.gen
        echo "LANG=fr_FR.UTF-8" >/mnt/etc/locale.conf
    else
        echo "LANG=en_US.UTF-8" >/mnt/etc/locale.conf
    fi
    echo "KEYMAP=$KEYMAP" >/mnt/etc/vconsole.conf
    if test "$TERMINUS_FONT" = "y" || test "$TERMINUS_FONT" = "Y"; then
        echo "FONT=ter-v16b" >>/mnt/etc/vconsole.conf
    else
        echo "FONT=eurlatgr" >>/mnt/etc/vconsole.conf
    fi
    echo "$HOSTNAME" >/mnt/etc/hostname
    echo "127.0.0.1 localhost" >>/mnt/etc/hosts
    echo "::1 localhost" >>/mnt/etc/hosts
    echo "127.0.1.1 $HOSTNAME.localdomain $HOSTNAME" >>/mnt/etc/hosts

    print-step true "Locales configuration..."
    arch-chroot /mnt ln -sf $TIMEZONE /etc/localtime
    arch-chroot /mnt locale-gen
    print-step true "Network configuration..."
    arch-chroot /mnt systemctl enable NetworkManager
    print-step true "Installation and configuration of the grub..."
    if test "$BIOS" = "Y"; then
        arch-chroot /mnt grub-install --target=i386-pc $TARGET_DISK
    else
        arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="Arch Linux"
    fi
    arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

    set +Eeo pipefail
    USER_ANSWER="N"
    SETUP_ONCE="N"
    while test "$USER_ANSWER" != "y" && test "$USER_ANSWER" != "Y"; do
        print-step true "Users configuration..."
        print-sub-step "  * Root account configuration..."
        if test "$SETUP_ONCE" = "N"; then
            arch-chroot /mnt chsh --shell /bin/zsh
        fi
        arch-chroot /mnt passwd
        if [ ! -z $USER_NAME ]; then
            if test "$SETUP_ONCE" = "N"; then
                sed -i "s|# %wheel ALL=(ALL) ALL|%wheel ALL=(ALL) ALL|g" /mnt/etc/sudoers
                arch-chroot /mnt useradd --shell=/bin/zsh --groups=wheel --create-home $USER_NAME
            fi
            print-sub-step "  * Password configuration for the user $USER_NAME..."
            arch-chroot /mnt passwd $USER_NAME
        fi
        SETUP_ONCE="Y"
        prompt "Is the users configuration correct ? (y/N) : " USER_ANSWER
    done

    # Démontage des partitions
    print-step true "Unmounting partitions..."
    if [ ! -z $SWAPFILE_SIZE ]; then
        swapoff /mnt/swapfile
    fi
    umount -R /mnt
    print-step true "Installation complete ! You can reboot your system."
}

install
