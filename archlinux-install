#!/usr/bin/env bash

# LICENSE
# archlinux-install, a very quick Arch Linux base installation script.
# Copyright (C) 2021  Rawleenc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# DISCLAIMER
# archlinux-install  Copyright (C) 2021  Rawleenc
#
# This program comes with ABSOLUTELY NO WARRANTY; See the
# GNU General Public License for more details.
#
# This is free software, and you are welcome to redistribute it
# under certain conditions; See the GNU General Public License for more details.

set -Eeo pipefail
[[ "$UID" -eq 0 ]] || exec sudo bash "$0" "$@"

RED="\033[0;31m"
GREEN="\033[0;32m"
CYAN="\033[0;36m"
ORANGE="\033[0;33m"
NOCOLOR="\033[0m"

export TEXTDOMAIN=archlinux-install

function print-error {
    echo -e "\n${RED}  /!\ $1${NOCOLOR}\n"
    pause
}

function print-step {
    if test "$1" = true; then
        clear
    fi
    echo -e "\n${GREEN}$2${NOCOLOR}"
}

function print-sub-step {
    echo -e "${CYAN}  * $1${NOCOLOR}"
}

function prompt {
    declare -n variable=$2
    read -e -p "$(echo -e ${ORANGE}"$1"${NOCOLOR})" variable
}

function promptln {
    declare -n variable=$2
    read -e -p "$(echo -e ${ORANGE}"$1\n"${NOCOLOR})" variable
}

function prompt-bool-default-no {
    declare -n variable=$2
    read -e -p "$(echo -e ${ORANGE}"$1"${NOCOLOR})" variable
    if [[ -z $variable ]]; then
        variable=false
    elif test "$variable" = "y" || test "$variable" = "Y" || test "$variable" = "o" || test "$variable" = "O"; then
        variable=true
    else
        variable=false
    fi
}

function prompt-bool-default-yes {
    declare -n variable=$2
    read -e -p "$(echo -e ${ORANGE}"$1"${NOCOLOR})" variable
    if [[ -z $variable ]]; then
        variable=true
    elif test "$variable" = "n" || test "$variable" = "N"; then
        variable=false
    else
        variable=true
    fi
}

function prompt-passwd {
    declare -n variable=$2
    read -s -r -p "$(echo -e ${ORANGE}"$1"${NOCOLOR})" variable
    echo ""
}

function pause {
    read -e -s -n 1 -p "$(echo -e ${ORANGE}"Press any key to continue...\n"${NOCOLOR})"
}

pacman -Sy

if [[ ! -f "fr.po" ]]; then
    curl -sLO "raw.githubusercontent.com/rawleenc/archlinux-install/dev/locales/fr.po"
fi

msgfmt -o /usr/share/locale/fr/LC_MESSAGES/archlinux-install.mo fr.po

USER_ANSWER=false
while [[ $USER_ANSWER != true ]]; do
    print-step true $"Welcome to the archlinux-install script !"
    if [[ ! -d "/sys/firmware/efi" ]]; then
        BIOS=true
        print-error $"BIOS detected ! The script will act accordingly. Don't forget to select a DOS label type before partitioning."
    else
        BIOS=false
    fi

    print-step false $"Environment configuration : "
    prompt $"Choose your installation's language (1: FR, other: EN) : " GLOBAL_LANGUAGE
    if test "$GLOBAL_LANGUAGE" = "1"; then
        GLOBAL_LANGUAGE="fr"
    else
        GLOBAL_LANGUAGE="en"
    fi
    prompt $"Type your installation's keymap (fr-latin9) : " KEYMAP
    if [[ -z "$KEYMAP" ]]; then
        KEYMAP="fr-latin9"
    fi
    print-step false $"Summary of choices :"
    print-sub-step $"Your installation's language : $GLOBAL_LANGUAGE"
    print-sub-step $"Your installation's keymap : $KEYMAP"
    prompt-bool-default-no $"Is the informations correct ? (y/N) : " USER_ANSWER
done

print-step false $"Configuring live environment..."
loadkeys ${KEYMAP}
setfont eurlatgr
if test "${GLOBAL_LANGUAGE}" = "fr"; then
    sed -i "s|#fr_FR.UTF-8 UTF-8|fr_FR.UTF-8 UTF-8|g" /etc/locale.gen
    locale-gen
    export LANG=fr_FR.UTF-8
    export LANGUAGE=fr_FR.UTF-8
    . gettext.sh
else
    export LANG=en_US.UTF-8
    export LANGUAGE=en_US.UTF-8
    . gettext.sh
fi

USER_ANSWER=false
while [[ $USER_ANSWER != true ]]; do
    print-step true $"System configuration : "
    fdisk -l
    prompt $"On which drive should Archlinux be installed ? (type the entire name, for example '/dev/sda') : " TARGET_DISK
    prompt $"What will be your hostname (archlinux) : " HOSTNAME
    prompt-bool-default-no $"Install LTS Linux kernel ? (y/N) : " LTS_KERNEL
    prompt-bool-default-no $"Install proprietary Nvidia driver ? (y/N) : " NVIDIA_DRIVER
    prompt-bool-default-no $"Install terminus console font ? (y/N) : " TERMINUS_FONT
    prompt $"Install a desktop environment ? (1: Gnome, 2: KDE Plasma, 3: XFCE, other: None) : " DESKTOP
    if [[ ! -z "$DESKTOP" ]] && test "$DESKTOP" = "2"; then
        prompt-bool-default-no $"Install Wayland support for the plasma session ? (y/N) : " PLASMA_WAYLAND
    fi
    prompt-bool-default-no $"Install Cups ? (y/N) : " CUPS
    prompt-bool-default-no $"Install ZSH with GRML configuration ? (y/N) : " GRML_ZSH
    prompt-bool-default-no $"Install a set of main fonts ? (y/N) : " MAIN_FONTS
    prompt-bool-default-no $"Install main file systems support ? (y/N) : " MAIN_FILE_SYSTEMS
    prompt $"Your timezone (/usr/share/zoneinfo/Europe/Paris) : " TIMEZONE
    prompt $"Would you like to add a user? (username, leave blank if none) : " USER_NAME
    if [[ ! -z "$USER_NAME" ]]; then
        prompt $"What is the ${USER_NAME}'s full name (type the entire full name, leave blank if none) : " USER_FULL_NAME
    fi
    set +Eeo pipefail
    PKGS_SELECT_OK="FAIL"
    while test "$PKGS_SELECT_OK" != "OK"; do
        PKGS_SELECT_OK="OK"
        promptln $"Install more packages ? (type extra packages full names, example : 'htop neofetch', leave blank if none) : " MORE_PKGS
        MORE_PKGS_ARRAY=(${MORE_PKGS})
        for pkg in "${MORE_PKGS_ARRAY[@]}"; do
            pacman -Ss ^${pkg}$ >/dev/null
            if test "$(if [[ "$?" -eq "0" ]]; then echo OK; else echo FAIL; fi)" = "FAIL"; then
                PKGS_SELECT_OK="FAIL"
                print-error $"Package $pkg doesn't exist."
                continue
            fi
        done
    done
    set -Eeo pipefail

    ROOT_PASSWORD_CONFIRM="wrong"
    while test "$ROOT_PASSWORD" != "$ROOT_PASSWORD_CONFIRM"; do
        print-sub-step $"root password configuration : "
        prompt-passwd $"Enter the root password : " ROOT_PASSWORD
        prompt-passwd $"Re-enter the root password to confirm : " ROOT_PASSWORD_CONFIRM
        if test "$ROOT_PASSWORD" != "$ROOT_PASSWORD_CONFIRM"; then
            print-error $"Passwords entered don't match."
        fi
    done

    if [[ ! -z "$USER_NAME" ]]; then
        USER_PASSWORD_CONFIRM="wrong"
        while test "$USER_PASSWORD" != "$USER_PASSWORD_CONFIRM"; do
            print-sub-step $"${USER_NAME} password configuration : "
            prompt-passwd $"Enter the $USER_NAME password : " USER_PASSWORD
            prompt-passwd $"Re-enter the $USER_NAME password to confirm : " USER_PASSWORD_CONFIRM
            if test "$USER_PASSWORD" != "$USER_PASSWORD_CONFIRM"; then
                print-error $"Passwords entered don't match."
            fi
        done
    fi

    # Required fields
    if [[ -z "$TARGET_DISK" ]]; then
        print-error $"You need to choose a target drive."
        continue
    fi
    if [[ ! -e "$TARGET_DISK" ]]; then
        print-error $"The chosen target drive doesn't exist."
        continue
    fi

    # Default values
    MICROCODES=$"none"
    if [[ -z "$HOSTNAME" ]]; then
        HOSTNAME="archlinux"
    fi
    if [[ -z "$DESKTOP" ]]; then
        DESKTOP=$"none"
    fi
    if test "$DESKTOP" = "1"; then
        DESKTOP="gnome"
    elif test "$DESKTOP" = "2"; then
        DESKTOP="plasma"
    elif test "$DESKTOP" = "3"; then
        DESKTOP="xfce"
    fi
    if [[ -z "$TIMEZONE" ]]; then
        TIMEZONE="/usr/share/zoneinfo/Europe/Paris"
    fi
    CPU_VENDOR_ID=$(cat /proc/cpuinfo | grep 'vendor' | uniq | cut -f 2 -d ":" | awk '{$1=$1}1')
    if test "$CPU_VENDOR_ID" = "GenuineIntel"; then
        MICROCODES="intel"
    fi
    if test "$CPU_VENDOR_ID" = "AuthenticAMD"; then
        MICROCODES="amd"
    fi
    print-step true $"Summary of choices :"
    print-sub-step $"Your target drive : $TARGET_DISK"
    print-sub-step $"Your hostname : $HOSTNAME"
    print-sub-step $"Microcodes to install : $MICROCODES"
    if [[ $LTS_KERNEL = true ]]; then
        print-sub-step $"Install LTS Linux kernel."
    fi
    if [[ $NVIDIA_DRIVER = true ]]; then
        print-sub-step $"Install proprietary Nvidia driver."
    fi
    if [[ $TERMINUS_FONT = true ]]; then
        print-sub-step $"Install terminus console font."
    fi
    print-sub-step $"Desktop environment : $DESKTOP"
    if test "$DESKTOP" = "plasma"; then
        if [[ $PLASMA_WAYLAND = true ]]; then
            print-sub-step $"Install Wayland support for the plasma session."
        fi
    fi
    if [[ $CUPS = true ]]; then
        print-sub-step $"Install Cups."
    fi
    if [[ $GRML_ZSH = true ]]; then
        print-sub-step $"Install ZSH with GRML configuration."
    fi
    if [[ $MAIN_FONTS = true ]]; then
        print-sub-step $"Install a set of main fonts."
    fi
    if [[ $MAIN_FILE_SYSTEMS = true ]]; then
        print-sub-step $"Install main file systems support."
    fi
    print-sub-step $"Your timezone : $TIMEZONE"
    if [[ ! -z "$USER_NAME" ]]; then
        print-sub-step $"Additional user name : $USER_NAME"
        if [[ ! -z "$USER_FULL_NAME" ]]; then
            print-sub-step $"User's full name : $USER_FULL_NAME"
        fi
    fi
    if [[ ! -z "$MORE_PKGS" ]]; then
        print-sub-step $"More packages to install : $MORE_PKGS"
    fi
    prompt-bool-default-no $"Is the informations correct ? (y/N) : " USER_ANSWER
done

# Partitioning
declare -A PART_TYPE
declare -A PART_MOUNT_POINT
declare -A PART_FORMAT
USER_ANSWER=false
while [[ $USER_ANSWER != true ]]; do
    print-step true $"Partitioning the target drive..."
    cfdisk $TARGET_DISK
    declare -a PARTITIONS=($(fdisk -l | grep "^${TARGET_DISK}*" | awk '{print $1}'))
    EFI_OK=false
    ROOT_OK=false
    SWAP_OK=false
    print-step true $"Detected target drive partitions :"
    INDEX=0
    for partition in "${PARTITIONS[@]}"; do
        print-sub-step $"Partition : $(fdisk -l | grep $partition)"
        if [[ $BIOS = true ]]; then
            prompt $"What is the role of this partition ? (1: Root, 2: Home, 3: Swap, other: Other) : " TYPE
        else
            prompt $"What is the role of this partition ? (0: EFI, 1: Root, 2: Home, 3: Swap, other: Other) : " TYPE
        fi
        if [[ $BIOS = false ]] && test "$TYPE" = "0"; then
            PART_TYPE["$partition"]="EFI"
            PART_MOUNT_POINT["$partition"]="/boot/efi"
            prompt-bool-default-no $"Format the EFI partition ? (y/N) : " PART_FORMAT["$partition"]
            EFI_OK=true
        elif test "$TYPE" = "1"; then
            PART_TYPE["$partition"]="ROOT"
            PART_MOUNT_POINT["$partition"]="/"
            ROOT_OK=true
            ROOT_PARTITION="$partition"
        elif test "$TYPE" = "2"; then
            PART_TYPE["$partition"]="HOME"
            PART_MOUNT_POINT["$partition"]="/home"
            prompt-bool-default-no $"Format the Home partition ? (y/N) : " PART_FORMAT["$partition"]
        elif test "$TYPE" = "3"; then
            PART_TYPE["$partition"]="SWAP"
            SWAP_OK=true
        else
            PART_TYPE["$partition"]="OTHER"
            prompt $"What is the mounting point of this partition ? : " MOUNT_POINT
            PART_MOUNT_POINT["$partition"]="$MOUNT_POINT"
            prompt-bool-default-yes $"Format the $partition partition ? (Y/n) : " PART_FORMAT["$partition"]
        fi
        let INDEX=${INDEX}+1
    done
    if [[ $SWAP_OK = false ]]; then
        prompt $"Swapfile size ? (Example: 8G, leave empty if none) : " SWAPFILE_SIZE
    fi
    if [[ $BIOS = false ]] && [[ $EFI_OK = false ]]; then
        print-error $"The EFI partition is required for system installation."
        continue
    fi
    if [[ $ROOT_OK = false ]]; then
        print-error $"The Root partition is required for system installation."
        continue
    fi
    print-step true $"Summary of choices :"
    for partition in "${PARTITIONS[@]}"; do
        if [[ ! -z ${PART_FORMAT[${partition}]} ]]; then
            if [[ ${PART_FORMAT[${partition}]} = true ]]; then
                FORMATTING=$"yes"
            else
                FORMATTING=$"no"
            fi
        fi
        if test "${PART_TYPE[${partition}]}" = "EFI"; then
            print-sub-step $"EFI partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]}, Format : ${FORMATTING})"
        elif test "${PART_TYPE[${partition}]}" = "ROOT"; then
            print-sub-step $"ROOT partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]})"
        elif test "${PART_TYPE[${partition}]}" = "HOME"; then
            print-sub-step $"Home partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]}, Format : ${FORMATTING})"
        elif test "${PART_TYPE[${partition}]}" = "SWAP"; then
            print-sub-step $"Swap partition : ${partition}"
        elif test "${PART_TYPE[${partition}]}" = "OTHER"; then
            print-sub-step $"Other partition : ${partition} (mounting point : ${PART_MOUNT_POINT[${partition}]}, Format : ${FORMATTING})"
        fi
    done
    if [[ $SWAP_OK = false ]] && [[ ! -z "$SWAPFILE_SIZE" ]]; then
        print-sub-step $"Swapfile size : $SWAPFILE_SIZE"
    fi
    prompt-bool-default-no $"Is the informations correct ? (y/N) : " USER_ANSWER
done

print-step true $"Formatting and mounting partitions..."

mkfs.ext4 "${ROOT_PARTITION}"
mkdir -p "/mnt${PART_MOUNT_POINT[${ROOT_PARTITION}]}"
mount "${ROOT_PARTITION}" "/mnt${PART_MOUNT_POINT[${ROOT_PARTITION}]}"

for partition in "${PARTITIONS[@]}"; do
    if [[ $BIOS = false ]] && test "${PART_TYPE[${partition}]}" = "EFI"; then
        if [[ ${PART_FORMAT[${partition}]} = true ]]; then
            mkfs.vfat "${partition}"
        fi
        mkdir -p "/mnt${PART_MOUNT_POINT[${partition}]}"
        mount "${partition}" "/mnt${PART_MOUNT_POINT[${partition}]}"
    elif test "${PART_TYPE[${partition}]}" = "HOME"; then
        if [[ ${PART_FORMAT[${partition}]} = true ]]; then
            mkfs.ext4 "${partition}"
        fi
        mkdir -p "/mnt${PART_MOUNT_POINT[${partition}]}"
        mount "${partition}" "/mnt${PART_MOUNT_POINT[${partition}]}"
    elif test "${PART_TYPE[${partition}]}" = "SWAP"; then
        mkswap ${partition}
        swapon ${partition}
    elif test "${PART_TYPE[${partition}]}" = "OTHER"; then
        if [[ ${PART_FORMAT[${partition}]} = true ]]; then
            mkfs.ext4 "${partition}"
        fi
        mkdir -p "/mnt${PART_MOUNT_POINT[${partition}]}"
        mount "${partition}" "/mnt${PART_MOUNT_POINT[${partition}]}"
    fi
done

# Creation and activation of the swapfile
if [[ $SWAP_OK = false ]] && [[ ! -z "$SWAPFILE_SIZE" ]]; then
    print-step false $"Creation and activation of the swapfile..."
    fallocate -l $SWAPFILE_SIZE /mnt/swapfile
    chmod 600 /mnt/swapfile
    mkswap /mnt/swapfile
    swapon /mnt/swapfile
fi

# Updating mirrors
print-step false $"Updating mirrors..."
reflector --save /etc/pacman.d/mirrorlist --protocol https --age 12 --score 5 --sort score

# Installation of the base
print-step false $"Installation of the base..."
declare -a PKGS=("base" "base-devel" "linux-firmware" "man-db" "man-pages" "texinfo" "nano" "vim" "git" "curl" "grub" "os-prober" "efibootmgr" "networkmanager" "xdg-user-dirs" "reflector" "numlockx")
if test "$MICROCODES" = "intel"; then
    PKGS+=("intel-ucode")
fi
if test "$MICROCODES" = "amd"; then
    PKGS+=("amd-ucode")
fi
if [[ $LTS_KERNEL = true ]]; then
    PKGS+=("linux-lts")
else
    PKGS+=("linux")
fi
if [[ $NVIDIA_DRIVER = true ]]; then
    if [[ $LTS_KERNEL = true ]]; then
        PKGS+=("nvidia-lts")
    else
        PKGS+=("nvidia")
    fi
fi
if [[ $TERMINUS_FONT = true ]]; then
    PKGS+=("terminus-font")
fi
if test "$DESKTOP" = "gnome"; then
    PKGS+=("gnome" "gnome-extra" "alsa-utils" "pulseaudio" "pulseaudio-alsa")
elif test "$DESKTOP" = "plasma"; then
    PKGS+=("plasma" "kde-applications" "xorg-server" "alsa-utils" "pulseaudio" "pulseaudio-alsa")
    if [[ $PLASMA_WAYLAND = true ]]; then
        PKGS+=("plasma-wayland-session")
        if [[ $NVIDIA_DRIVER = true ]]; then
            PKGS+=("egl-wayland")
        fi
    fi
elif test "$DESKTOP" = "xfce"; then
    PKGS+=("xfce4" "xfce4-goodies" "lightdm" "lightdm-gtk-greeter" "lightdm-gtk-greeter-settings" "xorg-server" "alsa-utils" "pulseaudio" "pulseaudio-alsa" "pavucontrol")
fi
if [[ $CUPS = true ]]; then
    PKGS+=("cups" "cups-pdf" "avahi" "samba" "foomatic-db-engine" "foomatic-db" "foomatic-db-ppds" "foomatic-db-nonfree-ppds" "foomatic-db-gutenprint-ppds" "gutenprint" "ghostscript")
fi
if [[ $GRML_ZSH = true ]]; then
    PKGS+=("zsh" "zsh-completions" "grml-zsh-config")
fi
if [[ $MAIN_FONTS = true ]]; then
    PKGS+=("gnu-free-fonts" "noto-fonts" "ttf-bitstream-vera" "ttf-dejavu" "ttf-hack" "ttf-droid" "ttf-fira-code" "ttf-fira-mono" "ttf-fira-sans" "ttf-font-awesome" "ttf-inconsolata" "ttf-input" "ttf-liberation" "ttf-nerd-fonts-symbols" "ttf-opensans" "ttf-roboto" "ttf-roboto-mono")
fi
if [[ $MAIN_FILE_SYSTEMS = true ]]; then
    PKGS+=("btrfs-progs" "dosfstools" "exfatprogs" "exfat-utils" "f2fs-tools" "e2fsprogs" "jfsutils" "nilfs-utils" "ntfs-3g" "reiserfsprogs" "udftools" "xfsprogs")
fi
if [[ ! -z "$MORE_PKGS" ]]; then
    PKGS+=($MORE_PKGS)
fi
pacstrap /mnt ${PKGS[@]}

# System configuration
print-step false $"System configuration..."
genfstab -U /mnt >>/mnt/etc/fstab
sed -i "s|#en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g" /mnt/etc/locale.gen
sed -i "s|#en_US ISO-8859-1|en_US ISO-8859-1|g" /mnt/etc/locale.gen
if test "$GLOBAL_LANGUAGE" = "fr"; then
    sed -i "s|#fr_FR.UTF-8 UTF-8|fr_FR.UTF-8 UTF-8|g" /mnt/etc/locale.gen
    sed -i "s|#fr_FR ISO-8859-1|fr_FR ISO-8859-1|g" /mnt/etc/locale.gen
    echo "LANG=fr_FR.UTF-8" >/mnt/etc/locale.conf
else
    echo "LANG=en_US.UTF-8" >/mnt/etc/locale.conf
fi
echo "KEYMAP=$KEYMAP" >/mnt/etc/vconsole.conf
if [[ $TERMINUS_FONT = true ]]; then
    echo "FONT=ter-v16b" >>/mnt/etc/vconsole.conf
else
    echo "FONT=eurlatgr" >>/mnt/etc/vconsole.conf
fi
sed -i "s|#Color|Color|g" /mnt/etc/pacman.conf
echo "$HOSTNAME" >/mnt/etc/hostname
echo "127.0.0.1 localhost" >>/mnt/etc/hosts
echo "::1 localhost" >>/mnt/etc/hosts
echo "127.0.1.1 $HOSTNAME.localdomain $HOSTNAME" >>/mnt/etc/hosts

print-step false $"Locales configuration..."
arch-chroot /mnt bash -c "ln -sf $TIMEZONE /etc/localtime"
arch-chroot /mnt bash -c "locale-gen"
print-step false $"Network configuration..."
arch-chroot /mnt bash -c "systemctl enable NetworkManager"
print-step false $"Installation and configuration of the grub..."
if [[ $BIOS = true ]]; then
    arch-chroot /mnt bash -c "grub-install --target=i386-pc $TARGET_DISK"
else
    arch-chroot /mnt bash -c 'grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="Arch Linux"'
fi
arch-chroot /mnt bash -c "grub-mkconfig -o /boot/grub/grub.cfg"

print-step false $"Extra packages configuration if needed..."
if test "$DESKTOP" = "gnome"; then
    arch-chroot /mnt bash -c "systemctl enable gdm"
    arch-chroot /mnt bash -c "amixer sset Master unmute"
    if [[ "$KEYMAP" == *"fr"* ]]; then
        arch-chroot /mnt bash -c "mkdir --parent /etc/X11/xorg.conf.d"
        arch-chroot /mnt bash -c "echo 'Section \"InputClass\"' > /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    Identifier \"system-keyboard\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    MatchIsKeyboard \"on\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    Option \"XkbLayout\" \"fr\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo 'EndSection' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
    fi
fi
if test "$DESKTOP" = "plasma"; then
    arch-chroot /mnt bash -c "systemctl enable sddm"
    arch-chroot /mnt bash -c "amixer sset Master unmute"
    if [[ "$KEYMAP" == *"fr"* ]]; then
        arch-chroot /mnt bash -c "mkdir --parent /etc/X11/xorg.conf.d"
        arch-chroot /mnt bash -c "echo 'Section \"InputClass\"' > /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    Identifier \"system-keyboard\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    MatchIsKeyboard \"on\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    Option \"XkbLayout\" \"fr\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo 'EndSection' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
    fi
fi
if test "$DESKTOP" = "xfce"; then
    arch-chroot /mnt bash -c "systemctl enable lightdm"
    arch-chroot /mnt bash -c "amixer sset Master unmute"
    if [[ "$KEYMAP" == *"fr"* ]]; then
        arch-chroot /mnt bash -c "mkdir --parent /etc/X11/xorg.conf.d"
        arch-chroot /mnt bash -c "echo 'Section \"InputClass\"' > /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    Identifier \"system-keyboard\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    MatchIsKeyboard \"on\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo '    Option \"XkbLayout\" \"fr\"' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
        arch-chroot /mnt bash -c "echo 'EndSection' >> /etc/X11/xorg.conf.d/00-keyboard.conf"
    fi
fi
if [[ $CUPS = true ]]; then
    arch-chroot /mnt bash -c "systemctl enable avahi-daemon"
    arch-chroot /mnt bash -c "systemctl enable cups"
    arch-chroot /mnt bash -c "systemctl enable cups-browsed"
fi

print-step false $"Users configuration..."
print-sub-step $"root account configuration..."
if [[ $GRML_ZSH = true ]]; then
    arch-chroot /mnt bash -c "chsh --shell /bin/zsh"
fi
arch-chroot /mnt bash -c "echo 'root:${ROOT_PASSWORD}' | chpasswd"
if [[ ! -z "$USER_NAME" ]]; then
    print-sub-step $"${USER_NAME} account configuration..."
    sed -i "s|# %wheel ALL=(ALL) ALL|%wheel ALL=(ALL) ALL|g" /mnt/etc/sudoers
    if [[ $GRML_ZSH = true ]]; then
        arch-chroot /mnt bash -c "useradd --shell=/bin/zsh --groups=wheel --create-home ${USER_NAME}"
    else
        arch-chroot /mnt bash -c "useradd --shell=/bin/bash --groups=wheel --create-home ${USER_NAME}"
    fi
    if [[ ! -z "$USER_FULL_NAME" ]]; then
        arch-chroot /mnt bash -c "chfn -f '${USER_FULL_NAME}' ${USER_NAME}"
    fi
    arch-chroot /mnt bash -c "echo '${USER_NAME}:${USER_PASSWORD}' | chpasswd"
fi

# Démontage des partitions
print-step false $"Unmounting partitions..."
if [[ ! -z "$SWAPFILE_SIZE" ]]; then
    swapoff /mnt/swapfile
fi
umount -R /mnt
print-step false $"Installation complete ! You can reboot your system."
